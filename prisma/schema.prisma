generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// üè∑Ô∏è Categories (Women, Men, Kids, Accessories, etc.)
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([isActive])
  @@index([sortOrder])
}

// üë§ User model (NextAuth)
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  wishlists     Wishlist[] // Added relation to Wishlist

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// üëï Products (Zara-style with all necessary fields)
model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?

  // Pricing
  originalPrice Float
  currentPrice  Float
  currency      String   @default("USD")
  discountPercent Float?

  // Media
  mainImage   String
  images      String[]

  // Variants
  colors      String[]
  sizes       String[]

  // Inventory
  inStock     Boolean  @default(true)
  quantity    Int      @default(0)

  // Category relationship
  categoryId  String   @db.ObjectId 
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Marketing flags
  isNew       Boolean  @default(false)
  onSale      Boolean  @default(false)
  isFeatured  Boolean  @default(false)

  // SEO & Organization
  tags        String[]
  sku         String?  @unique

  // Wishlist relation
  wishlists   Wishlist[] // Added relation to Wishlist

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
  @@index([isNew])
  @@index([onSale])
  @@index([isFeatured])
  @@index([inStock])
  @@index([currentPrice])
  @@index([createdAt])
}

// üìù Editorial content (Lookbooks, Style guides, etc.)
model Editorial {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  mainImage   String?
  images      String[]
  tags        String[]
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isPublished])
  @@index([publishedAt])
}

// üîë Account model (NextAuth)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// üïí Session model (NextAuth)
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// üîê VerificationToken model (NextAuth)
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier])
}

// ü©∂ Wishlist model
model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}